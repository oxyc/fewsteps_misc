<?php
/**
 * Implementation of contentasjson_get_node() hook
 * @see _contentasjson_get_node();
 */

function misc_hooks_contentasjson_get_node($node) {
  $node_array = array();
  $node_array['content'] = drupal_render(node_view($node));
  
  return $node_array;
}

function misc_hooks_block_info() {
  
  $blocks['contact_info'] = array(
    'info'    => t('Contact information'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['contact_info_small'] = array(
    'info'    => t('Small contact information'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['facebook_like_box'] = array(
    'info'    => t('Facebook like box'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['treasure_map'] = array(
    'info'    => t('Treasure map'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['cow'] = array(
    'info'    => t('Cow'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['slogan'] = array(
    'info'    => t('Slogan'),
    'status'  => FALSE,
    'weight'  => 0
  );
  $blocks['order'] = array(
    'info'    => t('Order form'),
    'status'  => FALSE,
    'weight'  => 0
  );
  return $blocks;
}
function misc_hooks_form_block_admin_configure_alter(&$form, &$form_state) {
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  $var_name = "#block-". $module . '-' . $delta;
  $form['test'] = array(
    '#type' => 'fieldset',
    '#title' => 'Block ID',
    '#description' => t('The ID of this block that you should use in the description field while adding menu items is: !id', array('!id' => "<b>". $var_name ."</b>")),
    '#weight' => -10
  );
  if(isset($form['custom_block_theme'])) $form['custom_block_theme']['blocktheme_vars']['#type'] = 'hidden';
  //if(isset($form['regions']['bartik'])) $form['regions']['bartik']['#type'] = 'hidden';
  //if(isset($form['regions']['seven'])) $form['regions']['seven']['#type'] = 'hidden';
}
function misc_hooks_block_configure($delta) {
  $form = array();
  switch($delta) {
    case 'contact_info_small':
    case 'contact_info':
      $form[$delta .'_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#default_value' => variable_get('contact_info_name')
      );
      $form[$delta .'_address'] = array(
        '#type' => 'textfield',
        '#title' => t('Street address'),
        '#default_value' => variable_get('contact_info_address')
      );
      $form[$delta .'_postal_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Postal code'),
        '#default_value' => variable_get('contact_info_postal_code')
      );
      $form[$delta .'_city'] = array(
        '#type' => 'textfield',
        '#title' => t('City'),
        '#default_value' => variable_get('contact_info_city')
      );
      $form[$delta .'_tel'] = array(
        '#type' => 'textfield',
        '#title' => t('Telephone number'),
        '#default_value' => variable_get('contact_info_tel')
      );
      $form[$delta .'_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => variable_get('contact_info_email')
      );
      break;
    case 'treasure_map':
      $form['title'] = array(
        '#type' => 'hidden',
        '#value' => '<none>'
      );
      $form['treasure_map_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Content text of the link'),
        '#default_value' => variable_get('treasure_map_text')
      );
      break;
  }
  return $form;
}
function misc_hooks_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'contact_info_small':
    case 'contact_info':
      variable_set('contact_info_name', $edit[$delta .'_name']);
      variable_set('contact_info_email', $edit[$delta .'_email']);
      variable_set('contact_info_tel', $edit[$delta .'_tel']);
      variable_set('contact_info_address', $edit[$delta .'_address']);
      variable_set('contact_info_city', $edit[$delta .'_city']);
      variable_set('contact_info_postal_code', $edit[$delta .'_postal_code']);
      break;
    case 'treasure_map':
      variable_set('treasure_map_text', $edit['treasure_map_text']);
      break;
  }
  return;
}

function misc_hooks_block_view($delta = '') {
  switch($delta) {
    case 'contact_info_small':
    case 'contact_info':
      $block['subject'] = NULL;
      $mail = str_replace(
      array('@', '.', 'i', 'h', 'f'),
      array('&#64;', '&#46;', '&#105;', '&#104;' ,'&#102;'),
      variable_get('contact_info_email'));
      $block['content'] = array(
        '#markup' => '
<p class="left"><a href="#block-views-google-map-block" class="goto-map scrollTo">'. t('Find us') .'</a></p>
<div class="vcard">
  <a class="url" href="http://www.herrgardsglass.fi/">'. t(variable_get('contact_info_name')) .'</a>
  <div class="fn org">'. t(variable_get('contact_info_name')) .'</div>
  <div class="adr">
    <div class="street-address">'. t(variable_get('contact_info_address')) .'</div>
    <span class="postal-code">'. variable_get('contact_info_postal_code') .'</span>
    <span class="locality">'. t(variable_get('contact_info_city')) .'</span>
    <div class="country-name">FINLAND</div>
  </div>
  <div class="tel">
   <span class="type">Work</span> '. variable_get('contact_info_tel') .'
  </div>
  <p><a class="email" href="&#109;ail&#116;&#111;&#58;'. $mail .'">'. $mail .'</a></p>
</div>'
      );
      break;
    case 'facebook_like_box':
      $block['subject'] = NULL;
      $block['content'] = array(
        '#markup' => '<div class="like-box"><iframe src="http://www.facebook.com/plugins/likebox.php?href=http%3A%2F%2Fwww.facebook.com%2Fpages%2FHerrg%25C3%25A5rdsGlass%2F187490641300929&amp;width=292&amp;colorscheme=dark&amp;show_faces=true&amp;border_color=%23000000&amp;stream=false&amp;header=false&amp;height=260" scrolling="no" frameborder="0" allowTransparency="true"></iframe></div>'
      );
      break;
    case 'treasure_map':
      global $base_path;
      $block['subject'] = NULL;
      $block['content'] = array(
        '#markup' => '<a class="colorbox-inline treasure-link" href="?width=900&height=500&inline=true#gmap-auto2map-gmap0"><span>'. variable_get('treasure_map_text') .'</span><img src="'. $base_path . path_to_theme() .'/images/treasure-map.png"></a>'
      );
      break;
    case 'cow':
      global $base_path;
      $block['subject'] = NULL;
      $block['content'] = array(
        '#markup' => '<a class="scrollTo" href="#block-views-google-map-block"><img src="'. $base_path . path_to_theme() .'/images/cow.png"></a>'
      );
      break;
    case 'slogan':
      $block['content'] = array(
        '#markup' => '<blockquote><p>'. t(variable_get('site_slogan')) .'</p></blockquote>'
      );
      break;
    case 'order':
      $block['content'] = array(
        '#markup' => drupal_render(drupal_get_form('order_form')),
      );
      break;
  }
  return $block;
}

function misc_hooks_form_alter(&$form, &$form_state, $form_id) {
  if(isset($form['module']['#value']) && $form['module']['#value'] == "block") {
    $form['settings']['title']['#maxlength'] = 128;
  }
  switch($form['#form_id']) {
    case 'contact_site_form':
      $form['subject']['#type'] = "hidden";
      $form['subject']['#value'] = "KontaktformulÃ¤r";
      $form['copy']['#type'] = "hidden";
      $form['copy']['#value'] = 0;
      $form['name']['#attributes']['placeholder'] = t('Name');
      $form['mail']['#attributes']['placeholder'] = t('E-mail');
      $form['message']['#attributes']['placeholder'] = t('Your message');
      $form['message']['#resizable'] = FALSE;
      unset($form['name']['#default_value']);
      unset($form['mail']['#default_value']);
      unset($form['message']['#default_value']);
      break;
  }
}

function misc_hooks_node_view($node, $view_mode, $langcode) {
  
  if ($view_mode == 'teaser' && isset($node->content['links']['node']['#links']['node-readmore'])) {
    unset($node->content['links']['node']['#links']['node-readmore']);
  }
}

/*function misc_hooks_entity_info_alter(&$entity_info) {
  if (module_exists('media')) {
    $entity_info['media']['view modes']['media_medium'] = array(
      'label' => t('Medium'),
      'custom settings' => TRUE,
    );
  }
}*/

/**
 * Add colorbox as a formatting option in the display, unfortunately this doesnt
 * use file styles
 */
/*function misc_hooks_field_formatter_info_alter(&$info) {
  if (module_exists('colorbox') && module_exists('media')) {
    $info['colorbox']['field types'][] = 'media';
  }
}*/

/*function misc_hooks_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Add a link to all contextual links for nodes.
  if ($root_path == 'node/%') {
    if (user_access('translate content') && preg_match("!^node/(\d+)(/.+|)!", $links['node-edit']['tab_root_href'], $matches)) {
      //db_query('SELECT language FROM {node} WHERE nid = %d', array('%d' => $nid)); dprint_r(i18n_node_get_lang($matches[1]));
      $links['node-translate'] = array(
        'title' => t('Translate'),
        'href' => $links['node-edit']['tab_root_href'] ."/translate",
        'localized_options' => array(
        ),
      );
    }
  }
}*/
function misc_hooks_contextual_links_view_alter(&$element, $items) {
  foreach(array('node-edit', 'node-delete', 'node-translate') as $node_item) {
    if(isset($element['#links'][$node_item])) {
      $element['#links'][$node_item]['query']['destination'] = 'frontpage';
    }
  }
}

function misc_hooks_node_view_alter(&$build) {
  if (!empty($build['#node']->nid)) {
    $build['#contextual_links']['node'] = array('node', array($build['#node']->nid));
  }
}

function misc_hooks_menu_alter(&$items) {
  $items['node/%node/translate']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/*function misc_hooks_styles_default_presets_alter(&$presets) {
  $image_presets = array();
  foreach (array_keys(image_styles()) as $style_name) {
    $image_presets[$style_name] = array(
      array('name' => 'image_style', 'settings' => array('image_style' => $style_name)),
      array('name' => 'thumbnail', 'settings' => array())
    );
  }
  $presets['file']['containers']['image']['presets'] = array_merge($presets['file']['containers']['image']['presets'], $image_presets);
  dprint_r(styles_default_presets());
}*/

/*function misc_hooks_styles_default_presets() {
  $file_styles = styles_default_presets('file');

  $image_presets = array();
  foreach (array_keys(image_styles()) as $style_name) {
    $image_presets[$style_name] = array(
      array('name' => 'image_style', 'settings' => array('image_style' => $style_name)),
      array('name' => 'thumbnail', 'settings' => array())
    );
  }
  $file_styles['containers']['image']['presets'] = array_merge($image_presets, $file_styles['containers']['image']['presets']);

  return array(
    'file' => $file_styles
  );
}*/

/*function misc_hooks_styles_default_presets() {
  $containers = array();
  foreach (array('image', 'default') as $type) {
    $containers[$type] = array();
    $styles = array();
    $presets = array();
    foreach (array_keys(image_styles()) as $style_name) {
      $styles[$style_name] = array(
        'default preset' => $style_name
      );
      $presets[$style_name] = array(
        array(
          'name' => 'image_style',
          'settings' => array(
            'image_style' => $style_name,
          ),
        ),
        array(
          'name' => 'thumbnail',
          'settings' => array(),
        ),
      );
    }
    $containers[$type]['default preset'] = key($styles);
    $containers[$type]['styles'] = $styles;
    $containers[$type]['presets'] = $presets;
  }
  
  return array(
    'file' => array(
      'containers' => $containers
    )
  );
}*/
function misc_hooks_file_styles_filter() {
  
}
