<?php

/**
 * 
 */
function misc_hooks_form_alter(&$form, &$form_state, $form_id) {
  // Allow long titles
  if(isset($form['module']['#value']) && $form['module']['#value'] == "block") {
    $form['settings']['title']['#maxlength'] = 128;
  }
  switch($form['#form_id']) {
    case 'contact_site_form':
      $form['subject']['#type'] = "hidden";
      $form['subject']['#value'] = "KontaktformulÃ¤r";
      $form['copy']['#type'] = "hidden";
      $form['copy']['#value'] = 0;
      $form['name']['#attributes']['placeholder'] = t('Name');
      $form['mail']['#attributes']['placeholder'] = t('E-mail');
      $form['message']['#attributes']['placeholder'] = t('Your message');
      $form['message']['#resizable'] = FALSE;
      unset($form['name']['#default_value']);
      unset($form['mail']['#default_value']);
      unset($form['message']['#default_value']);
      break;
  }
}

// Remove the read more link
function misc_hooks_node_view($node, $view_mode, $langcode) {
  
  if ($view_mode == 'teaser' && isset($node->content['links']['node']['#links']['node-readmore'])) {

    // Add a read more directly to the markup
    /*
    if (isset($node->content['body'][0]['#markup'])) {
      $node->content['body'][0]['#markup'] .= "<p>" . l(t('Read more'), $node->nid, array(
        'attributes' => array('class' => array('read-more')),
      )) . "</p>";
    }*/
    unset($node->content['links']['node']['#links']['node-readmore']);
  }
}

// Add node Edit, Delete and Translate as contextual links
function misc_hooks_contextual_links_view_alter(&$element, $items) {
  foreach(array('node-edit', 'node-delete', 'node-translate') as $node_item) {
    if(isset($element['#links'][$node_item])) {
      $element['#links'][$node_item]['query']['destination'] = 'frontpage';
    }
  }
}

//
function misc_hooks_node_view_alter(&$build) {
  if (!empty($build['#node']->nid)) {
    $build['#contextual_links']['node'] = array('node', array($build['#node']->nid));
  }
}

function misc_hooks_menu_alter(&$items) {
  $items['node/%node/translate']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Add custom view mdoes to files
 */
function misc_hooks_entity_info_alter(&$entity_info) {

  //Not sure if it's still an issue, but a previous commenter noted that Media module only recognizes view modes with the prefix media_. Also, as you can see by the entity type 'file', this is for after the switch-to-file-entity patch.
  $entity_info['file']['view modes']['media_slideshow'] = array(
    'label' => t('Slideshow'),
    'custom settings' => TRUE,
  );
  $entity_info['file']['view modes']['media_colorbox'] = array(
    'label' => t('Colorbox'),
    'custom settings' => TRUE,
  );
  $entity_info['file']['view modes']['media_wide'] = array(
    'label' => t('Wide'),
    'custom settings' => TRUE,
  );
}

/**
 * Add a stylesheet to the admin theme
 */
function misc_hooks_preprocess_page(&$variables) {
  global $theme_info;

  // If the page load is for the admin theme
  if ($theme_info->name == variable_get('admin_theme')) {
    stylus_add_stylus(drupal_get_path('theme', 'base') . '/stylesheets/stylus/seven.styl', array(
      'css_dir' => drupal_get_path('theme', 'base') . '/stylesheets/css',
      'group' => CSS_THEME,
    ));
  }
}

/**
 * Implements hook_page_alter().
 *
 * Hides the administration toolbar if the administration menu is available
 */
function misc_hooks_page_alter(&$page) {
  // Hide Toolbar for those who can access the Admin Menu.
  if (user_access('access administration menu') && !empty($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#access'] = FALSE;
  }
}

